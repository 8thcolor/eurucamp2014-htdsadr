%div.issue-form-holder
  %h3.page-title= @issue.new_record? ? "New Issue" : "Edit Issue ##{@issue.iid}"
  %hr
  = form_for [@project, @issue], html: { class: 'form-horizontal issue-form' } do |f|
    -if @issue.errors.any?
      .alert.alert-danger
        - @issue.errors.full_messages.each do |msg|
          %span= msg
          %br
    .form-group
      = f.label :title, class: 'control-label' do
        %strong= "Subject *"
      .col-sm-10
        = f.text_field :title, maxlength: 255, class: "form-control js-gfm-input", autofocus: true, required: true
    .form-group
      = f.label :description, "Details", class: 'control-label'
      .col-sm-10
        = f.text_area :description, class: "form-control js-gfm-input", rows: 14
        %p.hint Issues are parsed with #{link_to "GitLab Flavored Markdown", help_markdown_path, target: '_blank'}.
    %hr
    .form-group
      .issue-assignee
        = f.label :assignee_id, class: 'control-label' do
          %i.icon-user
          Assign to
        .col-sm-10
          = f.select(:assignee_id, assignee_options(@issue), { include_blank: "Select a user" }, {class: 'select2'})
          &nbsp;
          = link_to 'Assign to me', '#', class: 'btn btn-small assign-to-me-link'
    .form-group
      .issue-milestone
        = f.label :milestone_id, class: 'control-label' do
          %i.icon-time
          Milestone
        .col-sm-10= f.select(:milestone_id, milestone_options(@issue), { include_blank: "Select milestone" }, {class: 'select2'})

    .form-group
      = f.label :label_list, class: 'control-label' do
        %i.icon-tag
        Labels
      .col-sm-10
        = f.text_field :label_list, maxlength: 2000, class: "form-control"
        %p.hint Separate labels with commas.



    .form-actions
      - if @issue.new_record?
        = f.submit 'Submit new issue', class: "btn btn-create"
      -else
        = f.submit 'Save changes', class: "btn-save btn"

      - cancel_path = @issue.new_record? ? project_issues_path(@project) : project_issue_path(@project, @issue)
      = link_to "Cancel", cancel_path, class: 'btn btn-cancel'




:javascript
  $("#issue_label_list")
    .bind( "keydown", function( event ) {
      if ( event.keyCode === $.ui.keyCode.TAB &&
        $( this ).data( "autocomplete" ).menu.active ) {
        event.preventDefault();
      }
    })
    .bind("click", function(event) {
      $(this).autocomplete("search", "");
    })
    .autocomplete({
      minLength: 0,
      source: function( request, response ) {
        response( $.ui.autocomplete.filter(
          #{raw labels_autocomplete_source}, extractLast( request.term ) ) );
      },
      focus: function() {
        return false;
      },
      select: function(event, ui) {
        var terms = split( this.value );
        terms.pop();
        terms.push( ui.item.value );
        terms.push( "" );
        this.value = terms.join( ", " );
        return false;
      }
    });

  $('.assign-to-me-link').on('click', function(e){
    $('#issue_assignee_id').val("#{current_user.id}").trigger("change");
    e.preventDefault();
  });
